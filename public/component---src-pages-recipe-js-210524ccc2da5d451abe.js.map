{"version":3,"file":"component---src-pages-recipe-js-210524ccc2da5d451abe.js","mappings":"gOAGMA,E,KAAgBC,QAAAA,IAAAA,WAAH,iEAAGA,CAAH,sEAEiB,SAAAC,GAAK,OAAIA,EAAMC,SACnC,SAAAD,GAAK,OAAIA,EAAME,SAAW,UAc1C,EAXgB,SAACF,GAEb,IAAMC,EAAQD,EAAMC,MAAQD,EAAMC,MAAQD,EAAMG,SAASC,OAEzD,OACI,gBAACN,EAAD,CAAeO,UAAWL,EAAMK,UAAWH,QAASF,EAAME,QAASD,MAAOA,GACrED,EAAMG,WCmCnB,EA7CsB,SAAC,GAAc,IAAbG,EAAY,EAAZA,OAEdC,EAAcD,EAAOE,oBAErBC,EAAc,WAChB,OAAIF,EAEI,sBAAIF,UAAU,iCACTE,EAAYG,KAAI,SAACC,EAAMC,GACpB,OAAO,sBAAIC,IAAKD,GAAQD,EAAKG,oBAKtC,MAGX,OACI,gBAACC,EAAA,EAAD,CAAWV,UAAU,cAAcW,QAAQ,eACvC,sBAAIX,UAAU,qBAAd,WAEA,gBAAC,EAAD,CAASA,UAAU,cAAcJ,MAAM,KACnC,2BACI,sBAAII,UAAU,oBAAd,cACA,wBAAMY,GAAG,qBAAqBX,EAAOY,eAArC,aAEJ,2BACI,sBAAIb,UAAU,oBAAd,YACA,wBAAMY,GAAG,mBAAmBX,EAAOa,YAI3C,2BAEA,sBAAId,UAAU,oBAAd,eACA,gBAACI,EAAD,MAEA,2BAEA,sBAAIJ,UAAU,oBAAd,gBACA,uBAAKA,UAAU,sBAAsBe,wBAAyB,CAAEC,OAAQf,EAAOgB,kB,UC8B3F,EA/DoB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAElB,GAAgCC,EAAAA,EAAAA,WAAS,GAAlCC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAA9BlB,EAAP,KAAeqB,EAAf,KAEA,GAAwCC,EAAAA,EAAAA,GAAgB,IAAnCC,GAArB,WACA,GAAgCC,EAAAA,EAAAA,GAAY,IAA3BC,GAAjB,WAkCA,OA5BAC,EAAAA,EAAAA,YAAU,WAEN,IAAMC,EAAWV,EAASW,MAAMC,eAAgB,EAE7CF,EACCG,MAAM,+BAA+BH,EAAhC,eAAwD,CACzDI,QAAS,CACLC,WAAYC,KAAKC,UAAU,CACvBC,sBAAsB,OAI7BC,MACG,SAAAC,GAAQ,OAAIA,EAASC,UAExBF,MACG,SAAAG,GACIlB,EAAUkB,GACVC,aAAaC,QAAQ,eAAgBR,KAAKC,UAAUK,IACpDnB,GAAY,MAIxBC,EAAUY,KAAKS,MAAMF,aAAaG,QAAQ,oBAG/C,IAECxB,EAEI,gCACI,gBAACyB,EAAA,EAAD,KACI,wBAAM7C,UAAU,kBAChB,6BAAQC,EAAO6C,OACf,wBAAMC,KAAK,OAAOC,KAAK,2BAE3B,gBAACC,EAAA,EAAD,KACI,gBAACvC,EAAA,EAAD,KACI,uBAAKwC,IAAKjD,EAAOkD,MAAOC,IAAKnD,EAAO6C,QACpC,sBAAI9C,UAAU,gBAAgBC,EAAO6C,OACrC,gBAACO,EAAA,EAAD,CAAepD,OAAQA,EAAQqD,WAAY9B,EAAiB+B,UA5C9D,SAACtD,EAAQuD,GACvB9B,EAAYzB,EAAQuD,IA2C8EC,QAAQ,IAC1F,qBAAG1C,wBAAyB,CAAEC,OAAQf,EAAOyD,YAEjD,gBAAC,EAAD,CAAezD,OAAQA,MAKhC","sources":["webpack://meal-planning/./src/components/Columns.js","webpack://meal-planning/./src/components/recipes/RecipeDetails.js","webpack://meal-planning/./src/pages/recipe.js"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components';\n\nconst StyledColumns = styled.div`\n    display: grid;\n    grid-template-columns: repeat(${props => props.count}, 1fr);\n    grid-gap: ${props => props.gridGap || \"30px\"};\n`;\n\nconst Columns = (props) => {\n\n    const count = props.count ? props.count : props.children.length;\n\n    return (\n        <StyledColumns className={props.className} gridGap={props.gridGap} count={count} >\n            {props.children}\n        </StyledColumns>\n    )\n}\n\nexport default Columns\n","import * as React from 'react'\n\nimport Container from '../Container'\nimport Columns from '../Columns'\n\nconst RecipeDetails = ({recipe}) => {\n\n    const ingredients = recipe.extendedIngredients;\n\n    const Ingredients = () => {\n        if (ingredients) {\n            return (\n                <ul className=\"recipe_ingredients clear-list\">\n                    {ingredients.map((item, index) => {\n                        return <li key={index}>{item.originalString}</li>\n                    })}\n                </ul>\n            )\n        }\n        return null;\n    }\n\n    return (\n        <Container className=\"recipe-card\" padding=\"0 40px 40px\">\n            <h2 className=\"recipe_card-title\">Recipe </h2>\n\n            <Columns className=\"recipe_info\" count=\"4\">\n                <div>\n                    <h4 className=\"recipe_sub-title\">Total Time</h4>\n                    <span id=\"recipe_total-time\">{recipe.readyInMinutes} minutes</span>\n                </div>\n                <div>\n                    <h4 className=\"recipe_sub-title\">Servings</h4>\n                    <span id=\"recipe_servings\">{recipe.servings}</span>\n                </div>\n            </Columns>\n\n            <hr />\n\n            <h4 className=\"recipe_sub-title\">Ingredients</h4>\n            <Ingredients />\n\n            <hr />\n\n            <h4 className=\"recipe_sub-title\">Instructions</h4>\n            <div className=\"recipe_instructions\" dangerouslySetInnerHTML={{ __html: recipe.instructions }} />\n        </Container>\n    )\n}\n\nexport default RecipeDetails","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Helmet from \"react-helmet\";\n\nimport useSavedRecipes from \"../hooks/useSavedRecipes\";\nimport useMealPlan from \"../hooks/useMealPlan\";\n\nimport Layout from \"../components/Layout\";\nimport RecipeDetails from '../components/recipes/RecipeDetails'\nimport Container from \"../components/Container\";\nimport RecipeActions from \"../components/recipes/RecipeActions\";\n\nconst RecipesPage = ({location}) => {\n\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [recipe, setRecipe] = useState([]);\n\n    const [savedRecipes, setSavedRecipes] = useSavedRecipes([]);\n    const [mealPlan, setMealPlan] = useMealPlan([]);\n\n    const addRecipe = (recipe, day) => {\n        setMealPlan(recipe, day);\n    }\n\n    useEffect(() => {\n\n        const recipeId = location.state.activeRecipe || false;\n\n        if(recipeId) {\n            fetch(`/.netlify/functions/recipes/${recipeId}/information`, {\n                headers: {\n                    parameters: JSON.stringify({\n                        addRecipeInformation: true,\n                    })\n                }\n            })\n                .then(\n                    response => response.json()\n                )\n                .then(\n                    data => {\n                        setRecipe(data);\n                        localStorage.setItem(\"activeRecipe\", JSON.stringify(data));\n                        setIsLoaded(true);\n                    }\n                );\n        } else {\n            setRecipe(JSON.parse(localStorage.getItem(\"activeRecipe\")));\n        }\n\n    }, []);\n\n    if (isLoaded) {\n        return (\n            <>\n                <Helmet>\n                    <body className=\"single-recipe\" />\n                    <title>{recipe.title}</title>\n                    <meta name=\"icon\" href=\"../images/favicon.png\" />\n                </Helmet>\n                <Layout>\n                    <Container>\n                        <img src={recipe.image} alt={recipe.title} />\n                        <h1 className=\"recipe-title\">{recipe.title}</h1>\n                        <RecipeActions recipe={recipe} saveRecipe={setSavedRecipes} addRecipe={addRecipe} labels={true} />\n                        <p dangerouslySetInnerHTML={{ __html: recipe.summary }} />\n                    </Container>\n                    <RecipeDetails recipe={recipe} />\n                </Layout>\n            </>\n        )\n    }\n    return null;\n}\n\nexport default RecipesPage"],"names":["StyledColumns","styled","props","count","gridGap","children","length","className","recipe","ingredients","extendedIngredients","Ingredients","map","item","index","key","originalString","Container","padding","id","readyInMinutes","servings","dangerouslySetInnerHTML","__html","instructions","location","useState","isLoaded","setIsLoaded","setRecipe","useSavedRecipes","setSavedRecipes","useMealPlan","setMealPlan","useEffect","recipeId","state","activeRecipe","fetch","headers","parameters","JSON","stringify","addRecipeInformation","then","response","json","data","localStorage","setItem","parse","getItem","Helmet","title","name","href","Layout","src","image","alt","RecipeActions","saveRecipe","addRecipe","day","labels","summary"],"sourceRoot":""}